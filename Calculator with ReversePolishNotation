import java.util.*;
import java.math.BigDecimal;

public class Calculator {

    //Находим приоритет для операции
    public static int priority(char element) {

        switch (element) {
            case '*':
                return 2;

            case '/':
                return 2;

            case '-':
                return 1;

            case '+':
                return 1;
        }
        return 0;
    }

    // Формируем обратную польскую нотацию
    public static ArrayList<String> ReversePolishNotation(String str) {
        Stack<String> stack = new Stack<String>();
        ArrayList<String> output = new ArrayList();
        String[] arr = str.split("(?<=\\D)(?=\\d)|(?<=\\d)(?=\\D)|(?<=\\D)(?<=\\D)");
        for (int i = 0; i < arr.length; i++) {
            if (arr[i].equals("(") || arr[i].equals(")")) {
                stack.push(arr[i]);
            }
            if (arr[i].equals("+") || arr[i].equals("-") || arr[i].equals("/") || arr[i].equals("*")) {
                if (stack.empty()) {

                    stack.push(arr[i]);
                } else if (!stack.empty() && priority(stack.peek().charAt(0)) < priority(arr[i].charAt(0))) {
                    stack.push(arr[i]);

                } else if (!stack.empty() && priority(stack.peek().charAt(0)) >= priority(arr[i].charAt(0))) {
                    output.add(stack.pop());
                    stack.push(arr[i]);
                } else {
                    output.add(stack.pop());
                }
                ;
            }
            if (arr[i].matches("[0-9]+")) {
                output.add(arr[i]);

            }
            if (arr[i].equals(")")) {

                while (!stack.empty()) {
                    if (stack.peek().equals("(") || stack.peek().equals(")")) {
                        stack.pop();
                    } else
                        output.add(stack.pop());
                }

            }
            if (!stack.empty() && i == arr.length - 1) {
                while (!stack.empty()) {
                    if (stack.peek().equals("(") || stack.peek().equals(")")) {
                        stack.pop();
                    } else
                        output.add(stack.pop());
                }
            }
        }

        for (int i = 0; i < output.size(); i++) {
            output.remove("(");
            output.remove(")");
        }
        return output;
    }

    // Расчтитываем значение результата на основе обратной польской нотации
    public static BigDecimal calcValues(ArrayList<String> Symbols) {
        BigDecimal calcVal = new BigDecimal(0);
        calcVal.setScale(5);
        BigDecimal a = new BigDecimal(0);
        a.setScale(2);
        BigDecimal b = new BigDecimal(0);
        b.setScale(2);
        System.out.println(Symbols.toString());
        if (Symbols.size() <= 2 || Symbols.size() % 2 == 0) {
            throw new IllegalArgumentException("Вы ввели не верное выражение дял вычисления");
        }
        for (int i = 0; i < Symbols.size(); i++) {

            if (Symbols.get(i).equals("*")) {
                a = new BigDecimal(Symbols.get(i - 2));
                b = new BigDecimal(Symbols.get(i - 1));
                calcVal = a.multiply(b);
                Symbols.set(i, calcVal.toString());
                Symbols.remove(i - 1);
                Symbols.remove(i - 2);
                i = 0;
            } else if (Symbols.get(i).equals("/")) {
                a = new BigDecimal(Symbols.get(i - 2));
                b = new BigDecimal(Symbols.get(i - 1));
                calcVal = a.divide(b, 8, BigDecimal.ROUND_HALF_UP);
                Symbols.set(i, calcVal.toString());
                Symbols.remove(i - 1);
                Symbols.remove(i - 2);
                i = 0;
            } else if (Symbols.get(i).equals("+")) {
                a = new BigDecimal(Symbols.get(i - 2));
                b = new BigDecimal(Symbols.get(i - 1));
                calcVal = a.add(b);
                Symbols.set(i, calcVal.toString());
                Symbols.remove(i - 1);
                Symbols.remove(i - 2);
                i = 0;
            } else if (Symbols.get(i).equals("-")) {
                a = new BigDecimal(Symbols.get(i - 2));
                b = new BigDecimal(Symbols.get(i - 1));
                calcVal = a.subtract(b);
                Symbols.set(i, calcVal.toString());
                Symbols.remove(i - 1);
                Symbols.remove(i - 2);
                i = 0;
            }

        }

        return calcVal;
    }

    // Выводим результат на экран
    public static void main(String[] args) {
        System.out.println("Введите выражение");
        Scanner scanner = new Scanner(System.in);
        String inputStr = scanner.nextLine();
        System.out.println("ReversePolishNotation = " + ReversePolishNotation(inputStr).toString());
        BigDecimal c = calcValues(ReversePolishNotation(inputStr));
        System.out.println("Result = " + c);

    }

}
